#!/usr/bin/env python3
import asyncio
import datetime
import httpx
import logging
import logging.config


from lib.argparselib import get_args
from lib.mqtt_helper import mqtt_helper
from pypolestar.pypolestar.polestar import PolestarApi

_LOGGER = logging.getLogger(__name__)

POST_HEADER_JSON = {"Content-Type": "application/json"}

polestar_api = None

def flatten_dict(d, parent_key='', sep='_'):
    items = []
    for k, v in d.items():
        new_key = k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)

def get_clean_output_values(data):
    _LOGGER.debug(data)
    unneded_data_keys = ['__typename', 'angles', 'code', 'iso', 'unix']
    
    data['batteryUpdated'] = data['getBatteryData']['data']['eventUpdatedTimestamp']['iso']
    data['odoUpdated'] = data['getOdometerData']['data']['eventUpdatedTimestamp']['iso']
    
    data = {key: value for key, value in flatten_dict(data).items() if key not in unneded_data_keys}

    data['odometerKm'] = data['odometerMeters'] / 1000 # add km entry

    data['lastRequestTimestamp'] = datetime.datetime.now()
    del data['timestamp']

    return data


async def fetch(vin):
    await polestar_api.get_ev_data(vin)
    return dict(sorted(get_clean_output_values(polestar_api.cache_data).items()))

async def init():
    try:
        await polestar_api.init()
        return True
    except httpx.ConnectTimeout as e:
        _LOGGER.warning("Connection Timeout on init data %s", str(e))
    except httpx.ConnectError as e:
        _LOGGER.warning("Connection Error on init data %s", str(e))
    except httpx.ReadTimeout as e:
        _LOGGER.warning("Read Timeout on init data %s", str(e))
    except Exception as e:
        _LOGGER.error("Unexpected Error on init data %s", str(e))
    return False

async def main():
    global polestar_api
    args = get_args()
    loglevel = logging.WARNING
    if not args.debug and args.verbose:
        print('Verbose mode enabled')
        loglevel = logging.INFO
    if args.debug:
        print('Debug mode enabled')
        loglevel = logging.DEBUG
    logging.basicConfig(format='%(asctime)s %(name)s %(levelname)s: %(message)s', level=loglevel)
    logging.getLogger("httpx").setLevel(logging.WARNING)

    polestar_mqtt_helper = mqtt_helper()

    polestar_api = PolestarApi(args.polestar_email, args.polestar_password)
    initialized = await init()
    if not initialized:
        _LOGGER.error("Could not initialize Polestar API!")
        exit()
    vin = polestar_api.get_cache_data('getConsumerCarsV2', 'vin', True)
    _LOGGER.info("Running for VIN: " + str(vin))

    polestar_mqtt_helper.connect_mqtt(args.mqtt_host, args.mqtt_port, args.mqtt_client_id, args.mqtt_user, args.mqtt_password)
    _LOGGER.info("Connected successfully to %s:%s", args.mqtt_host, args.mqtt_port)
    _LOGGER.info("MQTT Topic is: %s", args.mqtt_topic)


    while True:
        try:
            ev_data = await fetch(vin)
        except httpx.ConnectTimeout as e:
            _LOGGER.warning("Connection Timeout on update data %s", str(e))
        except httpx.ConnectError as e:
            _LOGGER.warning("Connection Error on update data %s", str(e))
        except httpx.ReadTimeout as e:
            _LOGGER.warning("Read Timeout on update data %s", str(e))
        except Exception as e:
            _LOGGER.error("Unexpected Error on update data %s", str(e))
        else:
            polestar_mqtt_helper.send_data(args.mqtt_topic, ev_data, mqtt_cache=args.mqtt_cache, mqtt_single=args.mqtt_single, mqtt_single_separator=args.mqtt_single_separator)

        await asyncio.sleep(args.request_interval)

    
if __name__ == '__main__':
    asyncio.run(main())